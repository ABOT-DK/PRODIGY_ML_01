View(trial)
library(corrplot)
corrplot(cor(trail))
corrplot(cor(trail))
corrplot(cor(trial))
trial <- as.data.frame(c(trial$LotArea,trial$BedroomAbvGr,trial$BsmtFullBath))
View(trial)
trial <- matrix(c(trial$LotArea,trial$BedroomAbvGr,trial$BsmtFullBath))
trial <- matrix(trial$LotArea,trial$BedroomAbvGr,trial$BsmtFullBath)
trial <- as.data.frame(trial$LotArea,trial$BedroomAbvGr,trial$BsmtFullBath)
View(trial)
View(trail)
View(trial)
airquality
corrplot(cor(airquality), rm.na =T)
aggr(airquality)
library(VIM); beep(2)
library(beepr)
aggr(airquality); beep(2)
corrplot(cor(airquality[]), rm.na =T)
airquality[airquality$Ozone]
airquality[airquality$Ozone,]
airquality[,airquality$Ozone]
trial
train
train <- read.csv("train.csv")
train <- c(train$LotArea,train$SalePrice)
head(train)
View(head(train))
train <- matrix(train$LotArea,train$SalePrice)
train <- data.frame(train$LotArea,train$SalePrice)
train <- data.frame(c(train$LotArea,train$SalePrice))
train
library(tidyverse)
head(train)
View(head(train))
train <- read_csv("train.csv")
train <- train%>%select(train$LotArea,train$SalePrice)
View(head(train))
train <- train[5,]
View(train)
train <- train%>%select(train$LotArea,train$SalePrice)
train <- read_csv("train.csv")
train <- train[,5]
train <- read_csv("train.csv")
train <- train[,5][,81]
train <- train[,81]
train <- read_csv("train.csv")
train <- train[,5&81]
library('caret')
library('tidyverse')
set.seed(53)
getwd
()
getwd()
df <- read_csv('house_prices-dataset.csv')
df <- read_csv('house_prices_dataset.csv')
head(df)
set.seed(53)
trainIndex <- createDataPartition(df$Price, p = 0.8,
list = FALSE,
times = 1)
dfTrain <- df[trainIndex, ]
dfTest <- df[-trainIndex, ]
# Step 3: Fit a Linear Regression Model on the Training Data
model <- lm(Price ~ SquareFootage + Bedrooms + Bathrooms, data = dfTrain)
# Summary of the model
summary(model)
# Step 3: Fit a Linear Regression Model on the Training Data
model <- lm(Price ~ SquareFootage + Bedrooms + Bathrooms, data = dfTrain)
# Step 3: Fit a Linear Regression Model on the Training Data
model <- lm(Price ~ SquareFootage + Bedrooms + Bathrooms, data = dfTrain)
# Step 3: Fit a Linear Regression Model on the Training Data
model <- lm(Price ~ SquareFootage + Bedrooms + Bathrooms, data = dfTrain)
View(df)
# Step 3: Fit a Linear Regression Model on the Training Data
model <- lm(Price ~ `Square Footage` + Bedrooms + Bathrooms, data = dfTrain)
# Summary of the model
summary(model)
# Step 4: Make Predictions on the Test Data
dataTest$PredictedPrice <- predict(model, dataTest)
# Step 4: Make Predictions on the Test Data
dfTest$PredictedPrice <- predict(model, dataTest)
# Step 4: Make Predictions on the Test Data
dfTest$PredictedPrice <- predict(model, dfTest)
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
# Step 5: Evaluate the Model
# Calculate RMSE
rmse <- sqrt(mean((dataTest$Price - dataTest$PredictedPrice)^2))
# Step 5: Evaluate the Model
# Calculate RMSE
rmse <- sqrt(mean((dfTest$Price - dfTest$PredictedPrice)^2))
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
# Plot actual vs predicted prices
ggplot(dataTest, aes(x = Price, y = PredictedPrice)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = "red") +
labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices") +
theme_minimal()
# Plot actual vs predicted prices
ggplot(dfTest, aes(x = Price, y = PredictedPrice)) +
geom_point() +
geom_abline(slope = 1, intercept = 0, color = "red") +
labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices") +
theme_minimal()
# Summary of the model
summary(model)
pridict(model, c(15555,2,3,1))
predict(model, c(15555,2,3,1))
predict(model, ad.data.frame(c(15555,2,3,1))
)
predict(model, as.data.frame(c(15555,2,3,1)))
predict(model, as.data.frame(c(15555,3,1)))
View(df)
is.null(df)
sum(is.null(df))
duplicated(df)
sum(duplicated(df))
#Checking for duplicates
sum(duplicated(df))
ggplot(dataTest, aes(x = Price, y = PredictedPrice)) +
geom_point(aes(color = Price, size = Price), alpha = 0.6) +  # Color and size by actual price
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Dashed line for y=x
labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices") +
scale_color_gradient(low = "blue", high = "green") +  # Gradient from blue to green
scale_size(range = c(2, 6)) +  # Size range for points
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "none"  # Remove legend
)
ggplot(dfTest, aes(x = Price, y = PredictedPrice)) +
geom_point(aes(color = Price, size = Price), alpha = 0.6) +  # Color and size by actual price
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Dashed line for y=x
labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices") +
scale_color_gradient(low = "blue", high = "green") +  # Gradient from blue to green
scale_size(range = c(2, 6)) +  # Size range for points
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "none"  # Remove legend
)
# Plot actual vs predicted prices
> ggplot(dfTest, aes(x = Price, y = PredictedPrice)) +
ggplot(dfTest, aes(x = Price, y = PredictedPrice)) +
geom_point(aes(size = SquareFootage, color = Bedrooms), alpha = 0.7) +  # Bubble size by square footage, color by number of bedrooms
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Dashed reference line
labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices (Bubble Plot)") +
scale_color_gradient(low = "blue", high = "orange") +  # Gradient color for bedrooms
scale_size(range = c(3, 10), name = "Square Footage") +  # Size range for bubbles
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "right"  # Position the legend on the right
)
ggplot(dfTest, aes(x = Price, y = PredictedPrice)) +
geom_point(aes(size = 'Square Footage', color = Bedrooms), alpha = 0.7) +  # Bubble size by square footage, color by number of bedrooms
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Dashed reference line
labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices (Bubble Plot)") +
scale_color_gradient(low = "blue", high = "orange") +  # Gradient color for bedrooms
scale_size(range = c(3, 10), name = "Square Footage") +  # Size range for bubbles
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "right"  # Position the legend on the right
)
ggplot(dfTest, aes(x = Price, y = PredictedPrice)) +
geom_point(aes(size = df$`Square Footage`, color = Bedrooms), alpha = 0.7) +  # Bubble size by square footage, color by number of bedrooms
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Dashed reference line
labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices (Bubble Plot)") +
scale_color_gradient(low = "blue", high = "orange") +  # Gradient color for bedrooms
scale_size(range = c(3, 10), name = "Square Footage") +  # Size range for bubbles
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "right"  # Position the legend on the right
)
ggplot(df, aes(x = SquareFootage, y = Price, color = as.factor(Bedrooms), size = Bathrooms)) +
geom_point(alpha = 0.7) +  # Set point transparency
labs(x = "Square Footage", y = "Price",
title = "House Price vs. Square Footage",
color = "Number of Bedrooms",
size = "Number of Bathrooms") +
scale_color_brewer(palette = "Set1") +  # Use a color palette for better aesthetics
scale_size(range = c(3, 8)) +  # Set the size range for points
theme_minimal() +  # Use a minimal theme
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "right"  # Position the legend on the right
)
ggplot(df, aes(x = df$`Square Footage`, y = Price, color = as.factor(Bedrooms), size = Bathrooms)) +
geom_point(alpha = 0.7) +  # Set point transparency
labs(x = "Square Footage", y = "Price",
title = "House Price vs. Square Footage",
color = "Number of Bedrooms",
size = "Number of Bathrooms") +
scale_color_brewer(palette = "Set1") +  # Use a color palette for better aesthetics
scale_size(range = c(3, 8)) +  # Set the size range for points
theme_minimal() +  # Use a minimal theme
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "right"  # Position the legend on the right
)
library("RColorBrewer")
ggplot(df, aes(x = df$`Square Footage`, y = Price)) +
geom_point(aes(size = Bathrooms, color = as.factor(Bedrooms)), alpha = 0.7) +  # Bubble size by bathrooms, color by bedrooms
labs(x = "Square Footage", y = "Price",
title = "Bubble Plot of House Price vs. Square Footage",
color = "Number of Bedrooms",
size = "Number of Bathrooms") +
scale_color_brewer(palette = "Set1") +  # Color palette for bedrooms
scale_size(range = c(3, 10)) +  # Set the size range for bubbles
theme_minimal() +  # Use a minimal theme
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "right"  # Position the legend on the right
)
library(corrplot)
cor(df)
corrplot(corr(df))
corrplot(cor(df))
corrplot(cor(df),
method = "circle",        # Use circles to represent correlation
type = "full",            # Show full matrix
order = "hclust",         # Order by hierarchical clustering
addrect = 2,              # Add rectangles to highlight clusters
tl.col = "black",         # Text label color
tl.srt = 45,              # Rotate text labels
col = colorRampPalette(brewer.pal(8, "RdYlBu"))(200),  # Color palette
title = "Correlation Plot of Housing Data",  # Title
mar = c(0, 0, 1, 0))
cor(df)
corrplot(cor(df),
method = "circle",        # Use circles to represent correlation
type = "full",            # Show full matrix
order = "hclust",         # Order by hierarchical clustering
addrect = 2,              # Add rectangles to highlight clusters
tl.col = "black",         # Text label color
tl.srt = 45,              # Rotate text labels
col = colorRampPalette(brewer.pal(9, "Spectral"))(200),  # More vibrant color palette
pch.cex = 2,              # Size of the circles
title = "Correlation Plot of Housing Data",  # Title
mar = c(0, 0, 1, 0))      # Margin settings
model1 <- lm(Price ~ `Square Footage`, data = dfTrain)
summary(model)
summary(model1)
ggplot(dfTest, aes(x = Price, y = PredictedPrice)) +
+     geom_point(aes(color = Price, size = Price), alpha = 0.6) +  # Color and size by actual price
+     geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Dashed line for y=x
+     labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices") +
+     scale_color_gradient(low = "blue", high = "green") +  # Gradient from blue to green
+     scale_size(range = c(2, 6)) +  # Size range for points
+     theme_minimal() +
+     theme(
+         plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
ggplot(dfTest, aes(x = Price, y = PredictedPrice)) +
+     geom_point(aes(color = Price, size = Price), alpha = 0.6) +  # Color and size by actual price
+     geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Dashed line for y=x
+     labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices") +
+     scale_color_gradient(low = "blue", high = "green") +  # Gradient from blue to green
+     scale_size(range = c(2, 6)) +  # Size range for points
+     theme_minimal() +
+     theme(
+         plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
# Plot actual vs predicted prices
> ggplot(dfTest, aes(x = Price, y = PredictedPrice)) +
# Plot actual vs predicted prices
ggplot(dfTest, aes(x = Price, y = PredictedPrice)) +
+     geom_point(aes(color = Price, size = Price), alpha = 0.6) +  # Color and size by actual price
+     geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Dashed line for y=x
+     labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices") +
+     scale_color_gradient(low = "blue", high = "green") +  # Gradient from blue to green
+     scale_size(range = c(2, 6)) +  # Size range for points
+     theme_minimal() +
+     theme(
+         plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
# Plot actual vs predicted prices
ggplot(dfTest, aes(x = Price, y = PredictedPrice)) +
+     geom_point(aes(color = Price, size = Price), alpha = 0.6) +  # Color and size by actual price
+     geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Dashed line for y=x
+     labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices") +
+     scale_color_gradient(low = "blue", high = "green") +  # Gradient from blue to green
+     scale_size(range = c(2, 6)) +  # Size range for points
+     theme_minimal() +
+     theme(
+         plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
# Create a colorful scatter plot with enhancements
ggplot(dataTest, aes(x = Price, y = PredictedPrice)) +
geom_point(aes(color = Price, size = Price), alpha = 0.6) +  # Color and size by actual price
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Dashed line for y=x
labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices") +
scale_color_gradient(low = "blue", high = "green") +  # Gradient from blue to green
scale_size(range = c(2, 6)) +  # Size range for points
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "none"  # Remove legend
)
# Create a colorful scatter plot with enhancements
ggplot(dfTest, aes(x = Price, y = PredictedPrice)) +
geom_point(aes(color = Price, size = Price), alpha = 0.6) +  # Color and size by actual price
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Dashed line for y=x
labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices") +
scale_color_gradient(low = "blue", high = "green") +  # Gradient from blue to green
scale_size(range = c(2, 6)) +  # Size range for points
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "none"  # Remove legend
)
+         legend.position = "none"  # Remove legend
# Create a colorful scatter plot with enhancements
ggplot(dfTest, aes(x = Price, y = PredictedPrice)) +
geom_point(aes(color = Price, size = Price), alpha = 0.6) +  # Color and size by actual price
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Dashed line for y=x
labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices") +
scale_color_gradient(low = "blue", high = "green") +  # Gradient from blue to green
scale_size(range = c(2, 6)) +  # Size range for points
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "none"  # Remove legend
)
# Plot actual vs predicted prices
# Create a colorful scatter plot with enhancements
ggplot(dataTest, aes(x = Price, y = PredictedPrice)) +
geom_point(aes(color = Price, size = Price), alpha = 0.6) +  # Color and size by actual price
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Dashed line for y=x
labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices") +
scale_color_gradient(low = "blue", high = "green") +  # Gradient from blue to green
scale_size(range = c(2, 6)) +  # Size range for points
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "none"  # Remove legend
)
# Plot actual vs predicted prices
# Create a colorful scatter plot with enhancements
ggplot(dfTest, aes(x = Price, y = PredictedPrice)) +
geom_point(aes(color = Price, size = Price), alpha = 0.6) +  # Color and size by actual price
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Dashed line for y=x
labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices") +
scale_color_gradient(low = "blue", high = "green") +  # Gradient from blue to green
scale_size(range = c(2, 6)) +  # Size range for points
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "none"  # Remove legend
)
#Plot Relation
ggplot(df, aes(x = df$`Square Footage`, y = Price)) +
+     geom_point(aes(size = Bathrooms, color = as.factor(Bedrooms)), alpha = 0.7) +  # Bubble size by bathrooms, color by bedrooms
+     labs(x = "Square Footage", y = "Price",
+          title = "Bubble Plot of House Price vs. Square Footage",
#Correlation Plot
corrplot(cor_matrix,
method = "circle",        # Use circles to represent correlation
type = "full",            # Show full matrix
order = "hclust",         # Order by hierarchical clustering
addrect = 2,              # Add rectangles to highlight clusters
tl.col = "black",         # Text label color
tl.srt = 45,              # Rotate text labels
col = colorRampPalette(brewer.pal(9, "Spectral"))(200),  # More vibrant color palette
pch.cex = 2,              # Size of the circles
title = "Correlation Plot of Housing Data",  # Title
mar = c(0, 0, 1, 0))      # Margin settings
#Correlation Plot
corrplot(cor(df),
method = "circle",        # Use circles to represent correlation
type = "full",            # Show full matrix
order = "hclust",         # Order by hierarchical clustering
addrect = 2,              # Add rectangles to highlight clusters
tl.col = "black",         # Text label color
tl.srt = 45,              # Rotate text labels
col = colorRampPalette(brewer.pal(9, "Spectral"))(200),  # More vibrant color palette
pch.cex = 2,              # Size of the circles
title = "Correlation Plot of Housing Data",  # Title
mar = c(0, 0, 1, 0))      # Margin settings
#Plot Relation
ggplot(df, aes(x = df$`Square Footage`, y = Price)) +
+     geom_point(aes(size = Bathrooms, color = as.factor(Bedrooms)), alpha = 0.7) +  # Bubble size by bathrooms, color by bedrooms
+     labs(x = "Square Footage", y = "Price",
+          title = "Bubble Plot of House Price vs. Square Footage",
ggplot(df, aes(x = SquareFootage, y = Price)) +
geom_point(aes(size = Bathrooms, color = as.factor(Bedrooms)), alpha = 0.7) +  # Bubble size by bathrooms, color by bedrooms
labs(x = "Square Footage", y = "Price",
title = "Bubble Plot of House Price vs. Square Footage",
color = "Number of Bedrooms",
size = "Number of Bathrooms") +
scale_color_brewer(palette = "Set1") +  # Color palette for bedrooms
scale_size(range = c(3, 10)) +  # Set the size range for bubbles
theme_minimal() +  # Use a minimal theme
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "right"  # Position the legend on the right
)
ggplot(df, aes(x = df$`Square Footage`, y = Price)) +
geom_point(aes(size = Bathrooms, color = as.factor(Bedrooms)), alpha = 0.7) +  # Bubble size by bathrooms, color by bedrooms
labs(x = "Square Footage", y = "Price",
title = "Bubble Plot of House Price vs. Square Footage",
color = "Number of Bedrooms",
size = "Number of Bathrooms") +
scale_color_brewer(palette = "Set1") +  # Color palette for bedrooms
scale_size(range = c(3, 10)) +  # Set the size range for bubbles
theme_minimal() +  # Use a minimal theme
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "right"  # Position the legend on the right
)
#Plot Relation
ggplot(df, aes(x = df$`Square Footage`, y = Price)) +
geom_point(aes(size = Bathrooms, color = as.factor(Bedrooms)), alpha = 0.7) +  # Bubble size by bathrooms, color by bedrooms
labs(x = "Square Footage", y = "Price",
title = "Bubble Plot of House Price vs. Square Footage",
color = "Number of Bedrooms",
size = "Number of Bathrooms") +
scale_color_brewer(palette = "Set1") +  # Color palette for bedrooms
scale_size(range = c(3, 10)) +  # Set the size range for bubbles
theme_minimal() +  # Use a minimal theme
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "right"  # Position the legend on the right
)
ggplot(df, aes(x = df$`Square Footage`, y = Price)) +
geom_point(aes(size = Bathrooms, color = as.factor(Bedrooms)), alpha = 0.7) +  # Bubble size by bathrooms, color by bedrooms
labs(x = "Square Footage", y = "Price",
title = "Bubble Plot of House Price vs. Square Footage",
color = "Number of Bedrooms",
size = "Number of Bathrooms") +
scale_color_brewer(palette = "Set1") +  # Color palette for bedrooms
scale_size(range = c(3, 10)) +  # Set the size range for bubbles
theme_minimal() +  # Use a minimal theme
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "right"  # Position the legend on the right
)
#Plot Relation
ggplot(df, aes(x = df$`Square Footage`, y = Price)) +
geom_point(aes(size = Bathrooms, color = as.factor(Bedrooms)), alpha = 0.7) +  # Bubble size by bathrooms, color by bedrooms
labs(x = "Square Footage", y = "Price",
title = "Bubble Plot of House Price vs. Square Footage",
color = "Number of Bedrooms",
size = "Number of Bathrooms") +
scale_color_brewer(palette = "Set1") +  # Color palette for bedrooms
scale_size(range = c(3, 10)) +  # Set the size range for bubbles
theme_minimal() +  # Use a minimal theme
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "right"  # Position the legend on the right
)
#Correlation Plot
corrplot(cor(df),
method = "circle",        # Use circles to represent correlation
type = "full",            # Show full matrix
order = "hclust",         # Order by hierarchical clustering
addrect = 2,              # Add rectangles to highlight clusters
tl.col = "black",         # Text label color
tl.srt = 45,              # Rotate text labels
col = colorRampPalette(brewer.pal(9, "Spectral"))(200),  # More vibrant color palette
pch.cex = 2,              # Size of the circles
title = "Correlation Plot of Housing Data",  # Title
mar = c(0, 0, 1, 0))      # Margin settings
# Plot actual vs predicted prices
ggplot(dfTest, aes(x = Price, y = PredictedPrice)) +
geom_point(aes(color = Price, size = Price), alpha = 0.6) +  # Color and size by actual price
geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Dashed line for y=x
labs(x = "Actual Price", y = "Predicted Price", title = "Actual vs Predicted Prices") +
scale_color_gradient(low = "blue", high = "green") +  # Gradient from blue to green
scale_size(range = c(2, 6)) +  # Size range for points
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Center title and bold
axis.title = element_text(size = 12),  # Axis title size
axis.text = element_text(size = 10),  # Axis text size
legend.position = "none"  # Remove legend
)
